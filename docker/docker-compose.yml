version: '3'

volumes:
  cache:
    driver: local

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - "2181:2181"
    volumes:
      - ./pub-technology/zookeeper/data:/data
      - ./pub-technology/zookeeper/datalog:/datalog

  broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'



  postgres:
    image: postgres:12.3
    ports:
      - "5432:5432"
    env_file:
      - ../booking-service/.env
#    environment:
#      - POSTGRES_USER = ${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  booking-service:
    build:
      context: ../
      dockerfile: ./booking-service/Dockerfile
    image: booking
    ports:
      - "8080:8080"
    env_file:
      - ../booking-service/.env
    depends_on:
      - broker
      - postgres
      - redis

  mongodb:
    image: mongo:6.0.8
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: statisticdb
    volumes:
      - ./init.js:/docker-entrypoint-initdb.d/init.js

  statistic-service:
    build:
      context: ../
      dockerfile: ./statistic-service/Dockerfile
    image: statistic
    ports:
      - "8081:8081"
    environment:
      - HOST=mongodb
    depends_on:
      - broker
      - mongodb

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    env_file:
      - ../booking-service/.env
#    command: /bin/sh -c "redis-server --save 20 1 --loglevel warning --requirepass $$REDIS_PASSWORD"
    volumes:
      - cache:/data